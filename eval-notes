DECLARE_BLOCK(b_eval);
DECLARE_BLOCK(b_have_operator);
DECLARE_BLOCK(b_next_arg);
DECLARE_BLOCK(b_rest_arg);
DECLARE_BLOCK(b_sequence_continue);

//Call is: FRAME = make_frame(FRAME);
Goto is: FRAME = make_frame(F_PARENT);
Return is: FRAME = F_PARENT;
Call_then_goto is:  FRAME = make_frame(F_PARENT); FRAME = make_frame(FRAME);

tail_call is?
raise is?
call/cc is?

Each FRAME is used just once, absent call/cc.

eval(exp, env):
    if is_simple_case(exp):
	return simple_value(exp)
    proc = car(exp)
    args = cdr(exp)
    if is_special_form(proc) or is_null(args):
	if is_primitive(proc):
	    goto proc, (exp, env)
	body = proc_body(proc)
	new_env = make_env(env, args, proc_args(proc))
	if is_null(body):
	    return undefined
	goto eval_sequence, (body, new_env)
    first_arg = car(args)
    rest_args = cdr(args)
    call_then_goto(eval, (first_arg, env),
                   accum_arg, (rest_args, proc, env))

accum_arg(args, proc, env)
    if is_null(args):
	body = proc_body(proc)
	new_env = make_env(env, ???, proc_args(proc))
	if is_null(body):
	    return undefined
	goto eval_sequence, (body, new_env)
    next_arg = car(args)
    rest_args = cdr(args)
    call_then_goto(eval, (next_arg, env)
		   accum_arg, (rest_args, proc, env))

eval_sequence(seq, env):
    first = car(seq)
    rest = cdr(seq)
    if is_null(rest):
	goto eval, (first, env)
    call_then_goto(eval, (first, env), eval_sequence, (rest, env))
